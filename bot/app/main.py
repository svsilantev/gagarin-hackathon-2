import logging
import utils
from logger import setUpLogger
from config import MustLoad
import telebot
from telebot import types
import rs
import sqlite as st

# TODO: VERIFY IF ALL FIELDS ARE FILLED IN
config = MustLoad()

setUpLogger(config["log-level"])
logger = logging.getLogger(__name__)

logger.info("[bold yellow]== * Starting Bot * ==[/]", extra={"markup": True})
logger.info("[bold yellow]Logging level: {}[/]".format(config["log-level"]), extra={"markup": True})

r = rs.Storage(config["redis"]["host"], config["redis"]["port"])
r.checkConnection()

storage = st.Storage(config["sqlite"]["path"])

bot = telebot.TeleBot(config["bot"]["token"], skip_pending=True)


# handlers
@bot.message_handler(commands=['start'])
def send_welcome(message):
    response = storage.is_user_exists(message.from_user.id)
    if not response:
        storage.add_user(message.from_user.id)
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        start_btn = types.KeyboardButton('–ù–∞—á–∞—Ç—å‚ñ∂Ô∏è')
        markup.add(start_btn)
        try:
            bot.send_message(message.chat.id, "–ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï", reply_markup=markup)
        except Exception as e:
            logger.error(e)


@bot.message_handler(content_types=['text'])
def bot_handler(message):
    logger.debug("Message from {}: {}".format(message.from_user.id, message.text))

    response = storage.is_user_exists(message.from_user.id)

    logger.debug("Response to {}: {}".format(message.from_user.id, message.text))

    if not response:
        send_welcome(message)
        return

    match message.text:

        case "–ù–∞—á–∞—Ç—å‚ñ∂Ô∏è":
            logger.debug("Request: Get stage: {}: {}".format(message.from_user.id, message.text))
            stage = storage.get_user_stage(message.from_user.id)
            logger.debug("Response to {}: {}".format(message.from_user.id, stage))

            if stage == 0:
                text = """–í–≤–µ–¥–∏—Ç–µ –§–ò–û üë§\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"""

                bot.send_message(message.from_user.id, text, reply_markup=utils.return_back_markup())
            else:
                text = """–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞‚ùå"""
                bot.send_message(message.from_user.id, text)

        case "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ‚ñ∂Ô∏è":
            logger.debug("Request from {}: {}".format(message.from_user.id, message.text))
            response = storage.set_user_stage(message.from_user.id, 0)
            logger.debug("Response to {}: {}".format(message.from_user.id, response))

            storage.set_user_stage(message.from_user.id, 0)

            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            start_btn = types.KeyboardButton('–ù–∞—á–∞—Ç—å‚ñ∂Ô∏è')
            markup.add(start_btn)

            bot.send_message(message.from_user.id, "–ù–ê–ß–ê–¢–¨", reply_markup=markup)

        case _:
            logger.debug("Request: Get stage: {}: {}".format(message.from_user.id, message.text))
            stage = storage.get_user_stage(message.from_user.id)
            logger.debug("Response to {}: {}".format(message.from_user.id, stage))

            match stage:

                case 0:

                    # –§–ò–û
                    pass

                case 1:

                    # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                    pass

                case 2:

                    # –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
                    pass

                case 3:

                    # –î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏
                    pass

                case 5:

                    # –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
                    pass

                case 7:
                    # –£–≤–ª–µ—á–µ–Ω–∏—è
                    pass

                case 8:
                    # –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    pass

                case 9:
                    # –ù–∞–≥—Ä–∞–¥—ã –∏–ª–∏ –∑–∞—Å–ª—É–≥–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    pass


if __name__ == "__main__":
    logger.info("[bold yellow]== * Running Bot * ==[/]", extra={"markup": True})
    bot.polling(none_stop=True)
